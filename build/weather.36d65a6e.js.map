{"version":3,"sources":["js/weather.js"],"names":["createLineChart","data","shortMonthNames","months","map","entry","parseInt","month","totalRides","total_rides","ctx","document","getElementById","getContext","Chart","type","labels","datasets","label","borderColor","backgroundColor","options","scales","x","title","display","text","y","createPieChart","_id","season","counts","responsive","maintainAspectRatio","plugins","tooltip","callbacks","context","percentage","parsed","reduce","acc","curr","toFixed","concat","fetch","then","response","json","catch","error","console","fetchDataset1","createChart","dataset1","utils","CHART_COLORS","red","blue","transparentize","color","opacity","replace","significantPrecipitationData","filter","some","dataEntry","significant_precipitation","find","avg_rides","insignificantPrecipitationData"],"mappings":"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","file":"weather.36d65a6e.js","sourceRoot":"..","sourcesContent":["// Fetch JSON data from the provided URL\nfetch('https://divvy-db-public-5f412972abe3.herokuapp.com/api/v1.0/divvy_rides_by_month')\n  .then(response => response.json())\n  .then(data => {\n    // Call the function with fetched JSON data\n    createLineChart(data);\n  })\n  .catch(error => {\n    console.error('Error fetching data:', error);\n});\n\n// Call the function with the provided JSON data\nfunction createLineChart(data) {\n    // Define an array of short month names\n    const shortMonthNames = [\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n      ];\n\n    const months = data.map(entry => shortMonthNames[parseInt(entry.month) - 1]);\n    const totalRides = data.map(entry => entry.total_rides);\n\n    // Create a line chart\n    // Get the canvas element\n    const ctx = document.getElementById('rides__Chart').getContext('2d');\n    const ridesChart = new Chart(ctx, {\n    type: 'line',\n    data: {\n        labels: months,\n        datasets: [{\n            label: 'Rides by Month',\n            data: totalRides,\n            borderColor: 'blue',\n            backgroundColor: 'rgba(0, 0, 255, 0.1)',\n        }],\n    },\n    options: {\n        scales: {\n            x: {\n                title: {\n                    display: true,\n                    text: 'Month',\n                },\n            },\n            y: {\n                title: {\n                    display: true,\n                    text: 'Total Rides',\n                },\n            },\n        },\n    },\n    });\n}\n\n// Fetch JSON data from the provided URL\nfetch('https://divvy-db-public-5f412972abe3.herokuapp.com/api/v1.0/divvy_rides_by_season')\n  .then(response => response.json())\n  .then(data => {\n    // Call the function with fetched JSON data\n    createPieChart(data);\n  })\n  .catch(error => {\n    console.error('Error fetching data:', error);\n});\n\n// Call the function with the provided JSON data\nfunction createPieChart(data) {\n    // Extract seasons and total rides from the JSON data\n    const labels = data.map(entry => entry._id.season);\n    const counts = data.map(entry => entry.total_rides);\n  \n    const ctx = document.getElementById('pie__Chart').getContext('2d');\n    const pieChart = new Chart(ctx, {\n      type: 'pie',\n      data: {\n        labels: labels,\n        datasets: [{\n          data: counts,\n          backgroundColor: ['red', 'green', 'blue', 'orange', 'purple'], // Define colors\n        }],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: 'Rides by Type',\n        },\n        plugins: {\n            tooltip: {\n                callbacks: {\n                    label: (context) => {\n                        const label = context.label || '';\n                        const value = context.parsed || 0;\n                        const total = counts.reduce((acc, curr) => acc + curr, 0);\n                        const percentage = ((value / total) * 100).toFixed(2);\n                        return `${label}: ${percentage}%`;\n                    },\n                  },\n                },\n              },      \n            },\n      });\n  }\n\n\n// Fetch JSON data from the provided URLs\nconst fetchDataset1 = fetch('https://divvy-db-public-5f412972abe3.herokuapp.com/api/v1.0/avg_rides_by_month')\n  .then(response => response.json());\n\nfunction createChart(dataset1) {\n  function createUtils() {\n    return {\n      CHART_COLORS: {\n        red: 'rgba(255, 0, 0, 1)',\n        blue: 'rgba(0, 0, 255, 1)'\n      },\n      transparentize: (color, opacity) => {\n        const rgbaColor = color.replace('1)', `${opacity})`);\n        return rgbaColor;\n      }\n    };\n  }\n\n  const utils = createUtils();\n\n  // Extract data for \"Significant Precipitation\" and \"Insignificant Precipitation\" /\n  const significantPrecipitationData = dataset1\n    .filter(entry => entry.data.some(dataEntry => dataEntry.significant_precipitation === 'True'))\n    .map(entry => entry.data.find(dataEntry => dataEntry.significant_precipitation === 'True').avg_rides);\n\n  const insignificantPrecipitationData = dataset1\n    .filter(entry => entry.data.some(dataEntry => dataEntry.significant_precipitation === 'False'))\n    .map(entry => entry.data.find(dataEntry => dataEntry.significant_precipitation === 'False').avg_rides);\n\n  const labels = [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n  ];\n\n  const ctx = document.getElementById('weather__Chart').getContext('2d');\n  const weatherChart = new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: labels,\n      datasets: [\n        {\n          label: 'Significant Precipitation',\n          data: significantPrecipitationData,\n          borderColor: utils.CHART_COLORS.red,\n          backgroundColor: utils.transparentize(utils.CHART_COLORS.red, 0.5)\n        },\n        {\n          label: 'Insignificant Precipitation',\n          data: insignificantPrecipitationData,\n          borderColor: utils.CHART_COLORS.blue,\n          backgroundColor: utils.transparentize(utils.CHART_COLORS.blue, 0.5)\n        }\n      ]\n    },\n    options: {\n      scales: {\n        x: {\n          type: 'category',  // Use 'category' type for the x-axis\n          labels: labels,    // Provide the labels explicitly\n          title: {\n            display: true,\n            text: 'Month'\n          }\n        },\n        y: {\n          title: {\n            display: true,\n            text: 'Average Rides per Day'\n          }\n        }\n      }\n    }\n  });\n}\n\n// Call the function when the data is fetched\nfetchDataset1.then(createChart);\n\n"]}